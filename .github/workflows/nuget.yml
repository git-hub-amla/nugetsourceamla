name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (Read-only)'
        required: false
        default: ''  # This will be set dynamically by the workflow
      last_build_date:
        description: 'Date of the last build (Read-only)'
        required: false
        default: ''  # This will be set dynamically by the workflow
      last_build_version:
        description: 'Version of the last build (Read-only)'
        required: false
        default: ''  # This will be set dynamically by the workflow
      next_version:
        description: 'Next version (Editable)'
        required: true
        default: '1.0.1'  # Default to 1.0.1 but will be dynamically set based on history

jobs:
  recommend_version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      last_build_date: ${{ steps.version.outputs.last_build_date }}
      last_build_version: ${{ steps.version.outputs.last_build_version }}
      next_version: ${{ steps.version.outputs.next_version }}

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Read and update version history
      id: version
      run: |
        current_date=$(date +"%Y-%m-%d")
        
        # Check if VERSION_HISTORY.json exists, if not create it
        if [ ! -f VERSION_HISTORY.json ]; then
          echo '[]' > VERSION_HISTORY.json
        fi

        # Load the version history from VERSION_HISTORY.json
        version_history=$(cat VERSION_HISTORY.json)

        # Remove versions older than 10 days
        filtered_versions=$(echo "$version_history" | jq --arg current_date "$current_date" \
        '[.[] | select((($current_date | strptime("%Y-%m-%d") | mktime) - (.date | strptime("%Y-%m-%d") | mktime)) <= 864000)]')

        # Save filtered versions back to VERSION_HISTORY.json
        echo "$filtered_versions" > VERSION_HISTORY.json

        # Get the latest version and build date from the history
        last_build_version=$(echo "$filtered_versions" | jq -r '.[-1].version')
        last_build_date=$(echo "$filtered_versions" | jq -r '.[-1].date')

        # If no current version, default to 1.0.0
        if [ -z "$last_build_version" ] || [ "$last_build_version" = "null" ]; then
          last_build_version="1.0.0"
          last_build_date="$current_date"
        fi

        # Set current version to the last build version
        current_version="$last_build_version"

        # Suggest the next version (increment patch number)
        IFS='.' read -ra ADDR <<< "$current_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        next_version="$major.$minor.$((patch + 1))"

        # Display current version and last build info in logs
        echo "Current version: $current_version"
        echo "Last build date: $last_build_date"
        echo "Last build version: $last_build_version"
        echo "Recommended next version: $next_version"

        # Output variables for the next job
        echo "::set-output name=current_version::$current_version"
        echo "::set-output name=last_build_date::$last_build_date"
        echo "::set-output name=last_build_version::$last_build_version"
        echo "::set-output name=next_version::$next_version"
        
  build:
    needs: recommend_version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    - name: Restore dependencies
      run: dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj

    - name: Build the project
      run: dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release

    - name: Pack the library
      run: dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ needs.recommend_version.outputs.next_version }}

    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    - name: Commit and Push Updated Version History
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        version_data=$(jq -n --arg version "${{ needs.recommend_version.outputs.next_version }}" --arg date "$(date +"%Y-%m-%d")" '[{"version": $version, "date": $date}]')
        version_history=$(cat VERSION_HISTORY.json | jq ". + $version_data")
        echo "$version_history" > VERSION_HISTORY.json
        git add VERSION_HISTORY.json
        git commit -m "Update version history with ${{ needs.recommend_version.outputs.next_version }}"
        git push
