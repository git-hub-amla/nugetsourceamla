name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (Read-only)'  # Display the current version
        required: false
        default: ''  # This will be set dynamically in the job
      next_version:
        description: 'Next version (Editable)'  # Suggest the next version
        required: true
        default: '1.0.1'  # This will be set dynamically in the job

jobs:
  recommend_version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      next_version: ${{ steps.version.outputs.next_version }}

    steps:
    # Step 1: Checkout the project repository
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    # Step 2: Read the current version from VERSION.txt
    - name: Read current version
      id: version
      run: |
        current_version=$(cat VERSION.txt)
        echo "Current version is $current_version"
        
        # Suggest the next version (increment the patch number by default)
        IFS='.' read -ra ADDR <<< "$current_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        next_version="$major.$minor.$((patch + 1))"

        echo "Recommended next version is $next_version"

        # Set the outputs for current and next version
        echo "::set-output name=current_version::$current_version"
        echo "::set-output name=next_version::$next_version"

  build:
    needs: recommend_version
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the project repository
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    # Step 2: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'  # Adjust according to your .NET version

    # Step 3: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj

    # Step 4: Build the project
    - name: Build the project
      run: dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release

    # Step 5: Pack the NuGet package with dynamic version from input
    - name: Pack the library
      run: dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ github.event.inputs.next_version }}

    # Step 6: Publish the NuGet package to GitHub Packages in 'nugetsourceamla' repository
    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}  # Personal access token or GitHub token
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate
