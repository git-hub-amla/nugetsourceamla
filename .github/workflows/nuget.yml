name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      build_library1:
        description: 'Build Library1?'
        required: true
        default: false
        type: boolean
      library1_version:
        description: 'Version for Library1 (e.g., znode-gamma-1.0.7)'
        required: false
        default: ''
        type: string
      build_library2:
        description: 'Build Library2?'
        required: true
        default: false
        type: boolean
      library2_version:
        description: 'Version for Library2 (e.g., znode-alpha-1.9.2)'
        required: false
        default: ''
        type: string
      build_library3:
        description: 'Build Library3?'
        required: true
        default: false
        type: boolean
      library3_version:
        description: 'Version for Library3 (e.g., amla-comm-1.9.3)'
        required: false
        default: ''
        type: string
      branch_name:
        description: 'Branch name for versioning'
        required: true
        default: 'dev'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the project repository
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/projectamla
        token: ${{ secrets.ACCESS_TOKEN }}
        path: project

    # Step 2: Checkout the version.json from nugetsourceamla repository
    - name: Checkout the version.json from nugetsourceamla repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/nugetsourceamla
        token: ${{ secrets.ACCESS_TOKEN }}
        path: version_repo

    # Step 3: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    # Step 4: Read the current version from version.json and increment the patch number
    - name: Read and Increment Versions
      id: increment_versions
      run: |
        increment_version() {
          local version_input=$1
          if [ -z "$version_input" ]; then
            version=$(jq -r ".${2}.versions[\"${{ github.event.inputs.branch_name }}\"] // \"1.0.0\"" version_repo/version.json)
            IFS='.' read -ra ADDR <<< "$version"
            patch=$((ADDR[2] + 1))
            new_version="${ADDR[0]}.${ADDR[1]}.$patch"
          else
            new_version="$version_input"
          fi
          echo "$new_version"
        }

        new_version1=$(increment_version "${{ github.event.inputs.library1_version }}" "Library1")
        new_version2=$(increment_version "${{ github.event.inputs.library2_version }}" "Library2")
        new_version3=$(increment_version "${{ github.event.inputs.library3_version }}" "Library3")

        echo "::set-output name=new_version1::$new_version1"
        echo "::set-output name=new_version2::$new_version2"
        echo "::set-output name=new_version3::$new_version3"

    # Step 5: Validate and Sanitize Versions
    - name: Validate and Sanitize Versions
      run: |
        sanitize_version() {
          local version=$1
          # Remove any invalid characters or multiple dashes
          version=$(echo "$version" | sed 's/--/-/g') # Replace double dashes with a single dash
          version=$(echo "$version" | tr -d ' ') # Remove any spaces
          # Ensure it starts with a number or letter and ends with a digit
          if [[ ! $version =~ ^[0-9a-zA-Z][0-9a-zA-Z\-]*[0-9]$ ]]; then
            echo "Invalid version string: $version"
            exit 1
          fi
          echo "$version"  # Return the sanitized version
        }

        sanitized_version1=$(sanitize_version "${{ steps.increment_versions.outputs.new_version1 }}")
        sanitized_version2=$(sanitize_version "${{ steps.increment_versions.outputs.new_version2 }}")
        sanitized_version3=$(sanitize_version "${{ steps.increment_versions.outputs.new_version3 }}")

        echo "::set-output name=sanitized_version1::$sanitized_version1"
        echo "::set-output name=sanitized_version2::$sanitized_version2"
        echo "::set-output name=sanitized_version3::$sanitized_version3"

    # Conditional Step: Restore, build, and pack Library1 if selected
    - name: Build and Package Library1
      if: github.event.inputs.build_library1 == 'true'
      run: |
        dotnet restore project/NugetApplication/Library1/Library1.csproj
        dotnet build project/NugetApplication/Library1/Library1.csproj --configuration Release
        dotnet pack project/NugetApplication/Library1/Library1.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.validate_and_sanitize.outputs.sanitized_version1 }}

    # Conditional Step: Restore, build, and pack Library2 if selected
    - name: Build and Package Library2
      if: github.event.inputs.build_library2 == 'true'
      run: |
        dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj
        dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release
        dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.validate_and_sanitize.outputs.sanitized_version2 }}

    # Conditional Step: Restore, build, and pack Library3 if selected
    - name: Build and Package Library3
      if: github.event.inputs.build_library3 == 'true'
      run: |
        dotnet restore project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj
        dotnet build project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release
        dotnet pack project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.validate_and_sanitize.outputs.sanitized_version3 }}

    # Step 6: Publish the NuGet package to GitHub Packages
    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    # Step 7: Update version.json with the new versions and add to history
    - name: Update version.json
      if: github.event.inputs.build_library1 == 'true' || github.event.inputs.build_library2 == 'true' || github.event.inputs.build_library3 == 'true'
      run: |
        timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        if [ "${{ github.event.inputs.build_library1 }}" == 'true' ]; then
          jq ".Library1.versions[\"${{ github.event.inputs.branch_name }}\"] = \"${{ steps.validate_and_sanitize.outputs.sanitized_version1 }}\" | .Library1.history += [{\"version\": \"${{ steps.validate_and_sanitize.outputs.sanitized_version1 }}\", \"date\": \"$timestamp\"}]" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        if [ "${{ github.event.inputs.build_library2 }}" == 'true' ]; then
          jq ".Library2.versions[\"${{ github.event.inputs.branch_name }}\"] = \"${{ steps.validate_and_sanitize.outputs.sanitized_version2 }}\" | .Library2.history += [{\"version\": \"${{ steps.validate_and_sanitize.outputs.sanitized_version2 }}\", \"date\": \"$timestamp\"}]" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        if [ "${{ github.event.inputs.build_library3 }}" == 'true' ]; then
          jq ".Library3.versions[\"${{ github.event.inputs.branch_name }}\"] = \"${{ steps.validate_and_sanitize.outputs.sanitized_version3 }}\" | .Library3.history += [{\"version\": \"${{ steps.validate_and_sanitize.outputs.sanitized_version3 }}\", \"date\": \"$timestamp\"}]" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        cd version_repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add version.json
        git commit -m "Update versions for branch '${{ github.event.inputs.branch_name }}'"
        git push origin HEAD:main
