name: Build and Package NuGet

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (Read-only)'
        required: false
        default: ''
      next_version:
        description: 'Next version (Editable)'
        required: true
        default: '1.0.1'

jobs:
  recommend_version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      next_version: ${{ steps.version.outputs.next_version }}

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Read and update version history
      id: version
      run: |
        # Read version history and get the current date
        current_date=$(date +"%Y-%m-%d")
        current_version=""
        next_version=""
        
        # Read the VERSION_HISTORY.json file (create if not exists)
        if [ ! -f VERSION_HISTORY.json ]; then
          echo '[]' > VERSION_HISTORY.json
        fi
        
        # Load the version history
        version_history=$(cat VERSION_HISTORY.json)

        # Remove versions older than 10 days
        filtered_versions=$(echo "$version_history" | jq --arg current_date "$current_date" \
        '[.[] | select((($current_date | strptime("%Y-%m-%d") | mktime) - (.date | strptime("%Y-%m-%d") | mktime)) <= 864000)]')

        # Save filtered versions back to VERSION_HISTORY.json
        echo "$filtered_versions" > VERSION_HISTORY.json

        # Get the latest version from the history
        current_version=$(echo "$filtered_versions" | jq -r '.[-1].version')

        # If no current version, set to 1.0.0
        if [ -z "$current_version" ] || [ "$current_version" = "null" ]; then
          current_version="1.0.0"
        fi

        # Increment the patch number for the next version
        IFS='.' read -ra ADDR <<< "$current_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        next_version="$major.$minor.$((patch + 1))"

        # Add the new version entry to the history
        new_version_entry=$(jq -n --arg version "$next_version" --arg date "$current_date" \
        '{version: $version, date: $date}')

        # Append new version to the history and save
        updated_versions=$(echo "$filtered_versions" | jq --argjson new_version "$new_version_entry" '. + [$new_version]')
        echo "$updated_versions" > VERSION_HISTORY.json

        # Output current and next version
        echo "::set-output name=current_version::$current_version"
        echo "::set-output name=next_version::$next_version"

  build:
    needs: recommend_version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    - name: Restore dependencies
      run: dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj

    - name: Build the project
      run: dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release

    - name: Pack the library
      run: dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ github.event.inputs.next_version }}

    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    - name: Commit and Push Updated Version History
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add VERSION_HISTORY.json
        git commit -m "Update version history with ${{ github.event.inputs.next_version }}"
        git push
