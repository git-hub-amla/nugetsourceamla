name: Build and Package NuGet

on:
  workflow_dispatch:  # Enables manual triggering with inputs
    inputs:
      force_same_version:
        description: 'Force creation of the same version (checkbox)'
        required: false
        default: 'false'  # Default to unchecked
        type: boolean
      current_version:
        description: 'Current version (Read-only)'
        required: false
        default: ''
      next_version:
        description: 'Next version (Editable)'
        required: true
        default: ''

jobs:
  recommend_version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      next_version: ${{ steps.version.outputs.next_version }}

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Read and update version from version.json
      id: version
      run: |
        current_date=$(date +"%Y-%m-%d")

        # Check if version.json exists, if not create it with default version
        if [ ! -f version.json ]; then
          echo '{"version": "1.0.0"}' > version.json
        fi
        
        # Load the current version from version.json
        current_version=$(jq -r '.version' version.json)

        # Determine next version
        IFS='.' read -ra ADDR <<< "$current_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        
        # Check if the force_same_version input is true
        if [[ "${{ github.event.inputs.force_same_version }}" == "true" ]]; then
          next_version="$current_version"
        else
          next_version="$major.$minor.$((patch + 1))"
        fi

        echo "Current version: $current_version"
        echo "Next version: $next_version"

        # Output variables for the next job
        echo "::set-output name=current_version::$current_version"
        echo "::set-output name=next_version::$next_version"

  build:
    needs: recommend_version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    - name: Restore dependencies
      run: dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj

    - name: Build the project
      run: dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release

    - name: Pack the library
      run: dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.version.outputs.next_version }}

    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    - name: Update version.json
      run: |
        # Update the version.json with the next version
        jq --arg new_version "${{ steps.version.outputs.next_version }}" '.version = $new_version' version.json > tmp.json && mv tmp.json version.json

    - name: Commit and Push Updated Version
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add version.json
        git commit -m "Update version to ${{ steps.version.outputs.next_version }}"
        git push
