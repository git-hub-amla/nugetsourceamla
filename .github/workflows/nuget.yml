name: Build and Package NuGet

on:
  workflow_dispatch:  # Enables manual triggering with inputs
    inputs:
      build_library1:
        description: 'Build Library1?'  # Checkbox for Library1
        required: true
        default: false  # False by default
        type: boolean
      keep_version_library1:
        description: 'Keep current version for Library1?'  # Checkbox to keep current version
        required: true
        default: false
        type: boolean
      build_library2:
        description: 'Build Library2?'  # Checkbox for Library2
        required: true
        default: false  # False by default
        type: boolean
      keep_version_library2:
        description: 'Keep current version for Library2?'  # Checkbox to keep current version
        required: true
        default: false
        type: boolean
      build_library3:
        description: 'Build Library3?'  # Checkbox for Library3
        required: true
        default: false  # False by default
        type: boolean
      keep_version_library3:
        description: 'Keep current version for Library3?'  # Checkbox to keep current version
        required: true
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the project repository
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/projectamla  # Replace with your repo name if different
        token: ${{ secrets.ACCESS_TOKEN }}     # Using a secret for secure authentication
        path: project                         # Clone the repo into a folder named "project"

    # Step 2: Checkout the version.json from nugetsourceamla repository
    - name: Checkout the version.json from nugetsourceamla repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/nugetsourceamla  # Clone the version.json from this repo
        token: ${{ secrets.ACCESS_TOKEN }}
        path: version_repo  # Store in a separate folder to avoid conflicts

    # Step 3: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'  # Adjust according to your .NET version

    # Step 4: Read the current version from version.json and increment the patch number
    - name: Read and Increment Versions
      id: increment_versions
      run: |
        version1=$(jq -r '.Library1.version' version_repo/version.json)
        version2=$(jq -r '.Library2.version' version_repo/version.json)
        version3=$(jq -r '.Library3.version' version_repo/version.json)

        # Increment patch version for Library1 if selected and not keeping the current version
        if [ "${{ github.event.inputs.build_library1 }}" == 'true' ] && [ "${{ github.event.inputs.keep_version_library1 }}" == 'false' ]; then
          IFS='.' read -ra ADDR <<< "$version1"
          patch=$((ADDR[2] + 1))
          new_version1="${ADDR[0]}.${ADDR[1]}.$patch"
        else
          new_version1="$version1"  # Keep current version
        fi

        # Increment patch version for Library2 if selected and not keeping the current version
        if [ "${{ github.event.inputs.build_library2 }}" == 'true' ] && [ "${{ github.event.inputs.keep_version_library2 }}" == 'false' ]; then
          IFS='.' read -ra ADDR <<< "$version2"
          patch=$((ADDR[2] + 1))
          new_version2="${ADDR[0]}.${ADDR[1]}.$patch"
        else
          new_version2="$version2"  # Keep current version
        fi

        # Increment patch version for Library3 if selected and not keeping the current version
        if [ "${{ github.event.inputs.build_library3 }}" == 'true' ] && [ "${{ github.event.inputs.keep_version_library3 }}" == 'false' ]; then
          IFS='.' read -ra ADDR <<< "$version3"
          patch=$((ADDR[2] + 1))
          new_version3="${ADDR[0]}.${ADDR[1]}.$patch"
        else
          new_version3="$version3"  # Keep current version
        fi

        # Output the incremented versions for all libraries
        echo "::set-output name=new_version1::$new_version1"
        echo "::set-output name=new_version2::$new_version2"
        echo "::set-output name=new_version3::$new_version3"

    # Conditional Step: Restore, build, and pack Library1 if selected
    - name: Build and Package Library1
      if: github.event.inputs.build_library1 == 'true'
      run: |
        # Restore dependencies for Library1
        dotnet restore project/NugetApplication/Library1/Library1.csproj

        # Build Library1
        dotnet build project/NugetApplication/Library1/Library1.csproj --configuration Release

        # Pack Library1 with the incremented version
        dotnet pack project/NugetApplication/Library1/Library1.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.increment_versions.outputs.new_version1 }}

    # Conditional Step: Restore, build, and pack Library2 if selected
    - name: Build and Package Library2
      if: github.event.inputs.build_library2 == 'true'
      run: |
        # Restore dependencies for Library2
        dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj

        # Build Library2
        dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release

        # Pack Library2 with the incremented version
        dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.increment_versions.outputs.new_version2 }}

    # Conditional Step: Restore, build, and pack Library3 if selected
    - name: Build and Package Library3
      if: github.event.inputs.build_library3 == 'true'
      run: |
        # Restore dependencies for Library3
        dotnet restore project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj

        # Build Library3
        dotnet build project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release

        # Pack Library3 with the incremented version
        dotnet pack project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.increment_versions.outputs.new_version3 }}

    # Step 6: Publish the NuGet package to GitHub Packages in 'nugetsourceamla' repository
    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}  # Personal access token or GitHub token
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    # Step 7: Update version.json with the new versions and add to history
    - name: Update version.json
      if: github.event.inputs.build_library1 == 'true' || github.event.inputs.build_library2 == 'true' || github.event.inputs.build_library3 == 'true'
      run: |
        # Get current date and time
        timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        # Update version.json with the new version and history
        if [ "${{ github.event.inputs.build_library1 }}" == 'true' ]; then
          jq ".Library1.version = \"$new_version1\" | .Library1.history += [{\"version\": \"$new_version1\", \"date\": \"$timestamp\"}] | .Library1.history |= . | if length > 5 then .[length - 5:] else . end" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        if [ "${{ github.event.inputs.build_library2 }}" == 'true' ]; then
          jq ".Library2.version = \"$new_version2\" | .Library2.history += [{\"version\": \"$new_version2\", \"date\": \"$timestamp\"}] | .Library2.history |= . | if length > 5 then .[length - 5:] else . end" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        if [ "${{ github.event.inputs.build_library3 }}" == 'true' ]; then
          jq ".Library3.version = \"$new_version3\" | .Library3.history += [{\"version\": \"$new_version3\", \"date\": \"$timestamp\"}] | .Library3.history |= . | if length > 5 then .[length - 5:] else . end" version_repo/version.json > tmp.json && mv tmp.json version_repo/version.json
        fi

        # Commit and push the updated version.json file
        cd version_repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add version.json
