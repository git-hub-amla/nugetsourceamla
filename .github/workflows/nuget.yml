name: Build and Package NuGet

on:
  workflow_dispatch:  # Enables manual triggering with inputs
    inputs:
      # Branch selection input
      branch_name:
        description: 'Branch name (default: dev)'
        required: false
        default: 'dev'
        type: string

      # Library 1 build checkbox
      build_library1:
        description: 'Build Library 1?'
        required: true
        default: false  # False by default
        type: boolean

      # Library 1 version input
      version_library1:
        description: 'Version for Library 1 (optional, auto-increment if empty)'
        required: false
        default: ''
        type: string

      # Library 2 build checkbox
      build_library2:
        description: 'Build Library 2?'
        required: true
        default: false  # False by default
        type: boolean

      # Library 2 version input
      version_library2:
        description: 'Version for Library 2 (optional, auto-increment if empty)'
        required: false
        default: ''
        type: string

      # Library 3 build checkbox
      build_library3:
        description: 'Build Library 3?'
        required: true
        default: false  # False by default
        type: boolean

      # Library 3 version input
      version_library3:
        description: 'Version for Library 3 (optional, auto-increment if empty)'
        required: false
        default: ''
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the project repository
    - name: Checkout the project repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/projectamla
        token: ${{ secrets.ACCESS_TOKEN }}
        path: project

    # Step 2: Checkout the version.json from nugetsourceamla repository
    - name: Checkout the version.json from nugetsourceamla repository
      uses: actions/checkout@v2
      with:
        repository: git-hub-amla/nugetsourceamla
        token: ${{ secrets.ACCESS_TOKEN }}
        path: version_repo

    # Step 3: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '7.0'

    # Step 4: Read the current version from version.json and handle versioning logic
    - name: Read and Determine Versions
      id: determine_versions
      run: |
        # Get the branch name from the input
        branch="${{ github.event.inputs.branch_name }}"
        version_file="version_repo/version.json"

        # Initialize new version variables
        new_version1="${{ github.event.inputs.version_library1 }}"
        new_version2="${{ github.event.inputs.version_library2 }}"
        new_version3="${{ github.event.inputs.version_library3 }}"

        # Check if the version file exists; if not, create it with default structure
        if [ ! -f "$version_file" ]; then
          echo '{}' > "$version_file"
        fi

        # Read current versions from the version file
        version1=$(jq -r ".\"$branch\".Library1.version" "$version_file")
        version2=$(jq -r ".\"$branch\".Library2.version" "$version_file")
        version3=$(jq -r ".\"$branch\".Library3.version" "$version_file")

        # Function to determine the new version, defaults to "1.0.0" if not set
        determine_new_version() {
          local current_version=$1
          local provided_version=$2
          
          # Use provided version or calculate new version
          if [ -n "$provided_version" ]; then
            echo "$provided_version"
          elif [ -z "$current_version" ] || [ "$current_version" == "null" ]; then
            echo "1.0.0"
          else
            IFS='.' read -ra ADDR <<< "$current_version"
            patch=$((ADDR[2] + 1))
            echo "${ADDR[0]}.${ADDR[1]}.$patch"
          fi
        }

        # Determine new versions for each library
        if [ "${{ github.event.inputs.build_library1 }}" == 'true' ]; then
          new_version1=$(determine_new_version "$version1" "$new_version1")
        fi

        if [ "${{ github.event.inputs.build_library2 }}" == 'true' ]; then
          new_version2=$(determine_new_version "$version2" "$new_version2")
        fi

        if [ "${{ github.event.inputs.build_library3 }}" == 'true' ]; then
          new_version3=$(determine_new_version "$version3" "$new_version3")
        fi

        # Output the determined versions for all libraries
        echo "::set-output name=new_version1::$new_version1"
        echo "::set-output name=new_version2::$new_version2"
        echo "::set-output name=new_version3::$new_version3"

    # Step 5: Build and package the libraries based on selections
    - name: Build and Package Libraries
      run: |
        # Restore, build, and pack Library1 if selected
        if [ "${{ github.event.inputs.build_library1 }}" == 'true' ]; then
          dotnet restore project/NugetApplication/Library1/Library1.csproj
          dotnet build project/NugetApplication/Library1/Library1.csproj --configuration Release
          dotnet pack project/NugetApplication/Library1/Library1.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.determine_versions.outputs.new_version1 }}
        fi

        # Restore, build, and pack Library2 if selected
        if [ "${{ github.event.inputs.build_library2 }}" == 'true' ]; then
          dotnet restore project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj
          dotnet build project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release
          dotnet pack project/NugetApplication/ClassLibrary2/ClassLibrary2.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.determine_versions.outputs.new_version2 }}
        fi

        # Restore, build, and pack Library3 if selected
        if [ "${{ github.event.inputs.build_library3 }}" == 'true' ]; then
          dotnet restore project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj
          dotnet build project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release
          dotnet pack project/NugetApplication/ClassLibrary3/ClassLibrary3.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.determine_versions.outputs.new_version3 }}
        fi

    # Step 6: Publish the NuGet package to GitHub Packages
    - name: Publish NuGet Package
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        dotnet nuget push ./nupkgs/*.nupkg \
          --source "https://nuget.pkg.github.com/git-hub-amla/index.json" \
          --api-key $GITHUB_TOKEN \
          --skip-duplicate

    # Step 7: Update version.json with the new versions and add to history
    - name: Update version.json
      run: |
        timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        version_file="version_repo/version.json"

        # Update version.json with the new version and history
        jq --arg new_version1 "${{ steps.determine_versions.outputs.new_version1 }}" \
           --arg new_version2 "${{ steps.determine_versions.outputs.new_version2 }}" \
           --arg new_version3 "${{ steps.determine_versions.outputs.new_version3 }}" \
           --arg timestamp "$timestamp" \
           ".\"$branch\" |= . // {Library1: {version: \"\", history: []}, Library2: {version: \"\", history: []}, Library3: {version: \"\", history: []}} |
           .\"$branch\".Library1.version = \$new_version1 |
           .\"$branch\".Library1.history += [{\"version\": \$new_version1, \"date\": \$timestamp}] |
           .\"$branch\".Library2.version = \$new_version2 |
           .\"$branch\".Library2.history += [{\"version\": \$new_version2, \"date\": \$timestamp}] |
           .\"$branch\".Library3.version = \$new_version3 |
           .\"$branch\".Library3.history += [{\"version\": \$new_version3, \"date\": \$timestamp}]" "$version_file" > tmp.json && mv tmp.json "$version_file"

        # Keep only the last 5 history entries for each library
        jq "(.\"$branch\".Library1.history) = (.\"$branch\".Library1.history | .[-5:]) |
           (.\"$branch\".Library2.history) = (.\"$branch\".Library2.history | .[-5:]) |
           (.\"$branch\".Library3.history) = (.\"$branch\".Library3.history | .[-5:])" "$version_file" > tmp.json && mv tmp.json "$version_file"

        # Commit and push the updated version file to the repository
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Action"
        git add "$version_file"
        git commit -m "Update version.json with new versions"
        git push origin "$branch"
